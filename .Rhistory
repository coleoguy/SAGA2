realnames <- c()
# travel down vector
for (i in 1:(length(x) - 1)){
# test if there is a change
if (names(x)[i] != names(x)[i + 1]){
count <- i + 1
sum <- 0
while (names(x)[i + 1] == names(x)[count]){
sum <- sum + x[count]
count <- count + 1
}
newnametemp<-c(names(x)[i],names(x)[i+1],names(x)[count])
newname<-paste(newnametemp, collapse="->")
realnames<-c(realnames,newname)
sums<-c(sums,sum)
names(sums)<-realnames
print(sums)
}
else{
sums=sums
}
}
x <- z
#dont know how to get rid fo the error but it works
sums <- c()
realnames <- c()
# travel down vector
for (i in 1:(length(x) - 1)){
# test if there is a change
if (names(x)[i] != names(x)[i + 1]){
count <- i + 1
sum <- 0
# while (names(x)[i + 1] == names(x)[count]){
#   sum <- sum + x[count]
#   count <- count + 1
# }
newnametemp<-c(names(x)[i],names(x)[i+1],names(x)[count])
newname<-paste(newnametemp, collapse="->")
realnames<-c(realnames,newname)
sums<-c(sums,sum)
names(sums)<-realnames
print(sums)
}
else{
sums=sums
}
}
sums <- c()
realnames <- c()
results <- list(length=8)
names(results) <- c("F1F2", "F1R2", "R1F2", "R1R2",
"F2F1", "F2R2", "R2F1", "R2R1")
results <- vector("list", length=8)
names(results) <- c("F1F2", "F1R2", "R1F2", "R1R2",
"F2F1", "F2R2", "R2F1", "R2R1")
results
i <-2
x <- c(1.1, .9, .1, 3, 1.9, .21, .33)
names(x) <- c("11", "12", "12", "22", "22", "22", "21")
CollapseVector <- function(x){
z <- x[1]
for(i in 2: length(x)){
if(names(z)[length(z)] != names(x)[i]){
z <- c(z, x[i])
}else{
z[length(z)] <- z[length(z)] + x[i]
}
}
return(z)
}
x <- CollapseVector(x)
results <- vector("list", length=8)
names(results) <- c("F1F2", "F1R2", "R1F2", "R1R2",
"F2F1", "F2R2", "R2F1", "R2R1")
names(x)[i]
names(x)[i-1]
names(x)[(i-1):(i+1)
]
paste(names(x)[(i-1):(i+1)], collapse="")
paste(names(x)[(i-1):(i+1)], collapse=" "
)
results <- vector("list", length=8)
names(results) <- c("F1F2", "F1R2", "R1F2", "R1R2",
"F2F1", "F2R2", "R2F1", "R2R1")
# travel down vector
for (i in 2:(length(x) - 1)){
switch(paste(names(x)[(i-1):(i+1)], collapse=" "),
"11 21 22" = results[[1]] <- c(results[[1]], x[i]),
"12 22 21" = results[[2]] <- c(results[[2]], x[i]),
"21 11 12" = results[[3]] <- c(results[[3]], x[i]),
"22 12 11" = results[[4]] <- c(results[[4]], x[i]),
"11 12 22" = results[[5]] <- c(results[[5]], x[i]),
"12 11 21" = results[[6]] <- c(results[[6]], x[i]),
"12 11 21" = results[[7]] <- c(results[[7]], x[i]),
"22 21 11" = results[[8]] <- c(results[[8]], x[i])
)
}
results
results <- vector("list", length=8)
names(results) <- c("F1F2", "F1R2", "R1F2", "R1R2",
"F2F1", "F2R2", "R2F1", "R2R1")
# travel down vector
for (i in 2:(length(x) - 1)){
switch(paste(names(x)[(i-1):(i+1)], collapse=" "),
"11 21 22" = results[[1]] <- c(results[[1]], as.numeric(x[i])),
"12 22 21" = results[[2]] <- c(results[[2]], as.numeric(x[i])),
"21 11 12" = results[[3]] <- c(results[[3]], as.numeric(x[i])),
"22 12 11" = results[[4]] <- c(results[[4]], as.numeric(x[i])),
"11 12 22" = results[[5]] <- c(results[[5]], as.numeric(x[i])),
"12 11 21" = results[[6]] <- c(results[[6]], as.numeric(x[i])),
"12 11 21" = results[[7]] <- c(results[[7]], as.numeric(x[i])),
"22 21 11" = results[[8]] <- c(results[[8]], as.numeric(x[i]))
)
}
results
x <- c(1.1, .9, .1, 3, 1.9, .21, 1.1, .9, .1, 3, 1.9, .21, 1.1, .9, .1, 3, 1.9, .21, .33)
x <- c(1.1, .9, .1, 3, 1.9, .21, 1.1, .9, .1, 3, 1.9, .21, 1.1, .9, .1, 3, 1.9, .21, .33)
names(x) <- c("11", "12", "12", "22", "21", "22", "11", "12", "12", "22", "12", "22", "11", "12", "12", "22", "22", "22", "21")
x
CollapseVector <- function(x){
z <- x[1]
for(i in 2: length(x)){
if(names(z)[length(z)] != names(x)[i]){
z <- c(z, x[i])
}else{
z[length(z)] <- z[length(z)] + x[i]
}
}
return(z)
}
x <- CollapseVector(x)
x
x <- c(1.1, .9, .1, 3, 1.9, .21, 1.1, .9, .1, 3, 1.9, .21, 1.1, .9, .1, 3, 1.9, .21, .33)
names(x) <- c("11", "12", "12", "22", "21", "22", "12", "12", "12", "22", "12", "22", "12", "12", "12", "22", "22", "22", "21")
CollapseVector <- function(x){
z <- x[1]
for(i in 2: length(x)){
if(names(z)[length(z)] != names(x)[i]){
z <- c(z, x[i])
}else{
z[length(z)] <- z[length(z)] + x[i]
}
}
return(z)
}
x <- CollapseVector(x)
x
results <- vector("list", length=8)
names(results) <- c("F1F2", "F1R2", "R1F2", "R1R2",
"F2F1", "F2R2", "R2F1", "R2R1")
# travel down vector
for (i in 2:(length(x) - 1)){
switch(paste(names(x)[(i-1):(i+1)], collapse=" "),
"11 21 22" = results[[1]] <- c(results[[1]], as.numeric(x[i])),
"12 22 21" = results[[2]] <- c(results[[2]], as.numeric(x[i])),
"21 11 12" = results[[3]] <- c(results[[3]], as.numeric(x[i])),
"22 12 11" = results[[4]] <- c(results[[4]], as.numeric(x[i])),
"11 12 22" = results[[5]] <- c(results[[5]], as.numeric(x[i])),
"12 11 21" = results[[6]] <- c(results[[6]], as.numeric(x[i])),
"12 11 21" = results[[7]] <- c(results[[7]], as.numeric(x[i])),
"22 21 11" = results[[8]] <- c(results[[8]], as.numeric(x[i]))
)
}
results
x <- c(1.1, .9, .1, 3, 1.9, .21, 1.1, .9, .1, 3, 1.9, .21, 1.1, .9, .1, 3, 1.9, .21, .33)
names(x) <- c("11", "12", "12", "22", "21", "22", "12", "12", "12", "22", "12", "22", "12", "12", "12", "22", "22", "22", "21")
# how to get times between transitions
# 1      F2->F1
# 5.11   F1->R2
# fnx to simplify vector
CollapseVector <- function(x){
z <- x[1]
for(i in 2: length(x)){
if(names(z)[length(z)] != names(x)[i]){
z <- c(z, x[i])
}else{
z[length(z)] <- z[length(z)] + x[i]
}
}
return(z)
}
x <- CollapseVector(x)
results <- vector("list", length=8)
names(results) <- c("F1F2", "F1R2", "R1F2", "R1R2",
"F2F1", "F2R1", "R2F1", "R2R1")
# travel down vector
for (i in 2:(length(x) - 1)){
switch(paste(names(x)[(i-1):(i+1)], collapse=" "),
"11 21 22" = results[[1]] <- c(results[[1]], as.numeric(x[i])),
"12 22 21" = results[[2]] <- c(results[[2]], as.numeric(x[i])),
"21 11 12" = results[[3]] <- c(results[[3]], as.numeric(x[i])),
"22 12 11" = results[[4]] <- c(results[[4]], as.numeric(x[i])),
"11 12 22" = results[[5]] <- c(results[[5]], as.numeric(x[i])),
"21 22 12" = results[[6]] <- c(results[[6]], as.numeric(x[i])),
"12 11 21" = results[[7]] <- c(results[[7]], as.numeric(x[i])),
"22 21 11" = results[[8]] <- c(results[[8]], as.numeric(x[i]))
)
}
x
results
exists(results)
exists("results")
results <- vector("list", length=8)
names(results) <- c("F1F2", "F1R2", "R1F2", "R1R2",
"F2F1", "F2R1", "R2F1", "R2R1")
exists("results")
GetTimes <- function(x){
if(!exists("results")){
results <- vector("list", length = 8)
names(results) <- c("F1F2", "F1R2", "R1F2", "R1R2",
"F2F1", "F2R1", "R2F1", "R2R1")
}
# travel down vector
for (i in 2:(length(x) - 1)){
switch(paste(names(x)[(i-1):(i+1)], collapse=" "),
"11 21 22" = results[[1]] <- c(results[[1]], as.numeric(x[i])),
"12 22 21" = results[[2]] <- c(results[[2]], as.numeric(x[i])),
"21 11 12" = results[[3]] <- c(results[[3]], as.numeric(x[i])),
"22 12 11" = results[[4]] <- c(results[[4]], as.numeric(x[i])),
"11 12 22" = results[[5]] <- c(results[[5]], as.numeric(x[i])),
"21 22 12" = results[[6]] <- c(results[[6]], as.numeric(x[i])),
"12 11 21" = results[[7]] <- c(results[[7]], as.numeric(x[i])),
"22 21 11" = results[[8]] <- c(results[[8]], as.numeric(x[i]))
)
}
}
x <- c(1.1, .9, .1, 3, 1.9, .21, 1.1, .9, .1, 3, 1.9, .21, 1.1, .9, .1, 3, 1.9, .21, .33)
names(x) <- c("11", "12", "12", "22", "21", "22", "12", "12", "12", "22", "12", "22", "12", "12", "12", "22", "22", "22", "21")
x <- CollapseVector(x)
# fnx to simplify vector
CollapseVector <- function(x){
z <- x[1]
for(i in 2: length(x)){
if(names(z)[length(z)] != names(x)[i]){
z <- c(z, x[i])
}else{
z[length(z)] <- z[length(z)] + x[i]
}
}
return(z)
}
# pull out times
x <- c(1.1, .9, .1, 3, 1.9, .21, 1.1, .9, .1, 3, 1.9, .21, 1.1, .9, .1, 3, 1.9, .21, .33)
names(x) <- c("11", "12", "12", "22", "21", "22", "12", "12", "12", "22", "12", "22", "12", "12", "12", "22", "22", "22", "21")
x <- CollapseVector(x)
GetTimes <- function(x){
if(!exists("results")){
results <- vector("list", length = 8)
names(results) <- c("F1F2", "F1R2", "R1F2", "R1R2",
"F2F1", "F2R1", "R2F1", "R2R1")
}
# travel down vector
for (i in 2:(length(x) - 1)){
switch(paste(names(x)[(i-1):(i+1)], collapse=" "),
"11 21 22" = results[[1]] <- c(results[[1]], as.numeric(x[i])),
"12 22 21" = results[[2]] <- c(results[[2]], as.numeric(x[i])),
"21 11 12" = results[[3]] <- c(results[[3]], as.numeric(x[i])),
"22 12 11" = results[[4]] <- c(results[[4]], as.numeric(x[i])),
"11 12 22" = results[[5]] <- c(results[[5]], as.numeric(x[i])),
"21 22 12" = results[[6]] <- c(results[[6]], as.numeric(x[i])),
"12 11 21" = results[[7]] <- c(results[[7]], as.numeric(x[i])),
"22 21 11" = results[[8]] <- c(results[[8]], as.numeric(x[i]))
)
}
}
GetTimes(x)
GetTimes <- function(x){
if(!exists("results")){
results <- vector("list", length = 8)
names(results) <- c("F1F2", "F1R2", "R1F2", "R1R2",
"F2F1", "F2R1", "R2F1", "R2R1")
}
# travel down vector
for (i in 2:(length(x) - 1)){
switch(paste(names(x)[(i-1):(i+1)], collapse=" "),
"11 21 22" = results[[1]] <- c(results[[1]], as.numeric(x[i])),
"12 22 21" = results[[2]] <- c(results[[2]], as.numeric(x[i])),
"21 11 12" = results[[3]] <- c(results[[3]], as.numeric(x[i])),
"22 12 11" = results[[4]] <- c(results[[4]], as.numeric(x[i])),
"11 12 22" = results[[5]] <- c(results[[5]], as.numeric(x[i])),
"21 22 12" = results[[6]] <- c(results[[6]], as.numeric(x[i])),
"12 11 21" = results[[7]] <- c(results[[7]], as.numeric(x[i])),
"22 21 11" = results[[8]] <- c(results[[8]], as.numeric(x[i]))
)
}
return(results)
}
GetTimes(x)
GetTimes(x)
GetTimes <- function(x){
if(!exists("results")){
results <- vector("list", length = 8)
names(results) <- c("F1F2", "F1R2", "R1F2", "R1R2",
"F2F1", "F2R1", "R2F1", "R2R1")
}
# travel down vector
for (i in 2:(length(x) - 1)){
switch(paste(names(x)[(i-1):(i+1)], collapse=" "),
"11 21 22" = results[[1]] <- c(results[[1]], as.numeric(x[i])),
"12 22 21" = results[[2]] <- c(results[[2]], as.numeric(x[i])),
"21 11 12" = results[[3]] <- c(results[[3]], as.numeric(x[i])),
"22 12 11" = results[[4]] <- c(results[[4]], as.numeric(x[i])),
"11 12 22" = results[[5]] <- c(results[[5]], as.numeric(x[i])),
"21 22 12" = results[[6]] <- c(results[[6]], as.numeric(x[i])),
"12 11 21" = results[[7]] <- c(results[[7]], as.numeric(x[i])),
"22 21 11" = results[[8]] <- c(results[[8]], as.numeric(x[i]))
)
}
return(results)
}
GetTimes(x)
GetTimes(x)
GetTimes <- function(x, ...){
if(!exists("results")){
results <- vector("list", length = 8)
names(results) <- c("F1F2", "F1R2", "R1F2", "R1R2",
"F2F1", "F2R1", "R2F1", "R2R1")
}
# travel down vector
for (i in 2:(length(x) - 1)){
switch(paste(names(x)[(i-1):(i+1)], collapse=" "),
"11 21 22" = results[[1]] <- c(results[[1]], as.numeric(x[i])),
"12 22 21" = results[[2]] <- c(results[[2]], as.numeric(x[i])),
"21 11 12" = results[[3]] <- c(results[[3]], as.numeric(x[i])),
"22 12 11" = results[[4]] <- c(results[[4]], as.numeric(x[i])),
"11 12 22" = results[[5]] <- c(results[[5]], as.numeric(x[i])),
"21 22 12" = results[[6]] <- c(results[[6]], as.numeric(x[i])),
"12 11 21" = results[[7]] <- c(results[[7]], as.numeric(x[i])),
"22 21 11" = results[[8]] <- c(results[[8]], as.numeric(x[i]))
)
}
return(results)
}
GetTimes(x)
GetTimes(x)
GetTimes <- function(x, results){
if(!exists("results")){
results <- vector("list", length = 8)
names(results) <- c("F1F2", "F1R2", "R1F2", "R1R2",
"F2F1", "F2R1", "R2F1", "R2R1")
}
# travel down vector
for (i in 2:(length(x) - 1)){
switch(paste(names(x)[(i-1):(i+1)], collapse=" "),
"11 21 22" = results[[1]] <- c(results[[1]], as.numeric(x[i])),
"12 22 21" = results[[2]] <- c(results[[2]], as.numeric(x[i])),
"21 11 12" = results[[3]] <- c(results[[3]], as.numeric(x[i])),
"22 12 11" = results[[4]] <- c(results[[4]], as.numeric(x[i])),
"11 12 22" = results[[5]] <- c(results[[5]], as.numeric(x[i])),
"21 22 12" = results[[6]] <- c(results[[6]], as.numeric(x[i])),
"12 11 21" = results[[7]] <- c(results[[7]], as.numeric(x[i])),
"22 21 11" = results[[8]] <- c(results[[8]], as.numeric(x[i]))
)
}
return(results)
}
GetTimes(x)
library(SAGA2)
data1 <- read.csv("inst/cro.inf.35.csv", as.is = T)
setwd("~/Desktop/Dropbox/gitrepos/r-packages/SAGA2/inst")
setwd("~/Desktop/Dropbox/gitrepos/r-packages/SAGA2")
data1 <- read.csv("inst/cro.inf.35.csv", as.is = T)
data2 <- read.csv("inst/sin.cro.35.csv", as.is = T)
LCA(data1)
res1 <- LCA(data1)
res2 <- LCA(data2)
plot(res1)
x <- res1
data <- x
x <- c(as.numeric(t(data$estimates)[-1, ]), as.numeric(data$varimp[,2]))
x <- as.data.frame(matrix(x, length(x) / 3, 3))
x <- c(as.numeric(t(data$estimates)[-1, ]), as.numeric(data$varimp[,2]))
x <- as.data.frame(matrix(x, length(x) / 3, 3))
View(x)
colnames(x) <- c("estimates", "SE", "vi")
row.names(x) <- colnames(data$estimates)[-1]
data <- x[x$vi >= min.vi, ]
min.vi = .5
data <- x[x$vi >= min.vi, ]
source('~/Desktop/Dropbox/gitrepos/r-packages/SAGA2/R/plot.genarch.R')
source('~/Desktop/Dropbox/gitrepos/r-packages/SAGA2/R/plot.genarch.R')
plot(res1)
source('~/Desktop/Dropbox/gitrepos/r-packages/SAGA2/R/plot.genarch.R')
plot(res1)
source('~/Desktop/Dropbox/gitrepos/r-packages/SAGA2/R/plot.genarch.R')
source('~/Desktop/Dropbox/gitrepos/r-packages/SAGA2/R/plot.genarch.R')
plot(res1)
source('~/Desktop/Dropbox/gitrepos/r-packages/SAGA2/R/plot.genarch.R')
plot(res1)
source('~/Desktop/Dropbox/gitrepos/r-packages/SAGA2/R/plot.genarch.R')
plot(res1)
source('~/Desktop/Dropbox/gitrepos/r-packages/SAGA2/R/plot.genarch.R')
plot(res1)
source('~/Desktop/Dropbox/gitrepos/r-packages/SAGA2/R/plot.genarch.R')
plot(res1)
plot(res1, min.vi=.25)
plot(res2, min.vi=.25)
plot(res2, min.vi=.5)
data1 <- read.csv("inst/cro.inf.35.csv", as.is = T)
data2 <- read.csv("inst/sin.cro.35.csv", as.is = T)
res1 <- LCA(data1)
res2 <- LCA(data2)
plot(res1, min.vi=.25)
plot(res2, min.vi=.5)
plot(res2, min.vi=.25)
source('~/Desktop/Dropbox/gitrepos/r-packages/SAGA2/R/PrepareCmatrix.R')
source('~/Desktop/Dropbox/gitrepos/r-packages/SAGA2/R/plotObserved.R')
data = data1
PrepareCmatrix(user.data=data, SCS="XY", parental="calc", getP=T)
source('~/Desktop/Dropbox/gitrepos/r-packages/SAGA2/R/support.R')
PrepareCmatrix(user.data=data, SCS="XY", parental="calc", getP=T)
PrepareCmatrix(user.data=data, SCS="XY", parental="calc", drop.pars="", getP=T)
library(gtools)
PrepareCmatrix(user.data=data, SCS="XY", parental="calc", drop.pars="", getP=T)
PrepareCmatrix(user.data=data, SCS="XY", parental="calc", drop.pars=NULL, getP=T)
View(data)
x <- PrepareCmatrix(user.data = data, SCS = "XY",
parental = "calc", drop.pars = NULL,
getP=T)$p1a
source('~/Desktop/Dropbox/gitrepos/r-packages/SAGA2/R/PrepareCmatrix.R')
x <- PrepareCmatrix(user.data = data, SCS = "XY",
parental = "calc", drop.pars = NULL,
getP=T, messages=F)$p1a
y <- data$mean
y <- data$mean
se <- data$SE
if(length(unique(x)) != length(x)){
x <- jitter(x)
}else{
x <- x
}
high <- max(y + se)
low <- min(y - se)
if(is.null(pch)) pch <- 16
pch <- 16
col <- "black"
xlab <- "% P1 Genome"
ylab <- "Phenotype Measure"
plot(x=x, y=y,
ylab=ylab, xlab=xlab,
xaxt="n", pch=pch, main=main, ylim=c(low,high))
for(i in 1:length(x)){
lines(x=rep(x[i], 2), y= c((y[i] + se[i]), (y[i] - y[i])))
}
plot(x=x, y=y,
ylab=ylab, xlab=xlab,
xaxt="n", pch=pch, main=main, ylim=c(low,high))
for(i in 1:length(x)){
lines(x=rep(x[i], 2), y= c((y[i] + se[i]), (y[i] - se[i])))
}
axis(side=1,labels=c(0,50,100), at=c(0,50,100))
high <- max(y + se)
low <- min(y - se)
plot(x=x, y=y,
ylab=ylab, xlab=xlab,
xaxt="n", pch=pch, main=main, ylim=c(low,high))
for(i in 1:length(x)){
lines(x=rep(x[i], 2), y= c((y[i] + se[i]), (y[i] - se[i])))
}
axis(side=1,labels=c(0,50,100), at=c(0,50,100))
abline(glm(y~x, weights = se), lty="dashed", col="blue")
x <- PrepareCmatrix(user.data = data, SCS = "XY",
parental = "calc", drop.pars = NULL,
getP=T, messages=F)$p1a * 100
y <- data$mean
se <- data$SE
# jitter the x values since they are often the same
if(length(unique(x)) != length(x)){
x <- jitter(x)
}else{
x <- x
}
high <- max(y + se)
low <- min(y - se)
plot(x=x, y=y,
ylab=ylab, xlab=xlab,
xaxt="n", pch=pch, main=main, ylim=c(low,high))
for(i in 1:length(x)){
lines(x=rep(x[i], 2), y= c((y[i] + se[i]), (y[i] - se[i])))
}
axis(side=1,labels=c(0,50,100), at=c(0,50,100))
abline(glm(y~x, weights = se), lty="dashed", col="blue")
high <- max(y + se)
low <- min(y - se)
plot(x=x, y=y,
ylab=ylab, xlab=xlab,
xaxt="n", pch=pch, main=main, ylim=c(low,high), xlim=c(0,100))
for(i in 1:length(x)){
lines(x=rep(x[i], 2), y= c((y[i] + se[i]), (y[i] - se[i])))
}
axis(side=1,labels=c(0,50,100), at=c(0,50,100))
abline(glm(y~x, weights = se), lty="dashed", col="blue")
source('~/Desktop/Dropbox/gitrepos/r-packages/SAGA2/R/plotObserved.R')
View(data)
data1 <- read.csv("inst/cro.inf.35.csv")
res1 <- LCA(data1)
View(data)
View(data)
data$cross
data1$cross
lapply(data1$cross, as.character)
unlist(lapply(data1$cross, as.character))
data1$cross
is.factor(data1$cross)
source('~/Desktop/Dropbox/gitrepos/r-packages/SAGA2/R/LCA.R')
data1 <- read.csv("inst/cro.inf.35.csv")
data2 <- read.csv("inst/sin.cro.35.csv", as.is = T)
res1 <- LCA(data1)
source('~/Desktop/Dropbox/gitrepos/r-packages/SAGA2/R/AnalyzeModels.R')
res1 <- LCA(data1)
res2 <- LCA(data2)
source('~/Desktop/Dropbox/gitrepos/r-packages/SAGA2/R/PrepareCmatrix.R')
